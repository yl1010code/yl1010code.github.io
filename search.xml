<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2021/09/30/Butterfly%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/"/>
      <url>/2021/09/30/Butterfly%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Butterfly-主题设置"><a href="#Butterfly-主题设置" class="headerlink" title="Butterfly 主题设置"></a>Butterfly 主题设置</h1><p><strong>注明</strong>：主题中的个人文件不要放在Hexo根目录的source文件夹里的源文件夹中，升级主题会覆盖掉，可以在source文件夹里新键文件夹。引用文件为：/文件夹名/文件名。</p><h2 id="一般配置"><a href="#一般配置" class="headerlink" title="一般配置"></a>一般配置</h2><p>官网：<a href="https://butterfly.js.org/posts/4aa8abbe/#%E9%A0%82%E9%83%A8%E5%9C%96">https://butterfly.js.org/posts/4aa8abbe/#頂部圖</a><br><strong>注明</strong>： 因为是外国网站，有时候网站打开太慢，有时候打不开，建议使用代理。  </p><h2 id="功能配置"><a href="#功能配置" class="headerlink" title="功能配置"></a>功能配置</h2><h3 id="Hexo增添搜索功能"><a href="#Hexo增添搜索功能" class="headerlink" title="Hexo增添搜索功能"></a>Hexo增添搜索功能</h3><p>引用：<a href="https://www.jianshu.com/p/d388119a90ec">https://www.jianshu.com/p/d388119a90ec</a></p><h3 id="Hexo搜索引擎收录"><a href="#Hexo搜索引擎收录" class="headerlink" title="Hexo搜索引擎收录"></a>Hexo搜索引擎收录</h3><p>github上的免费域名不能用，要自己购买域名。因为github不允许百度爬取。<br>github使用百度爬取：<a href="https://segmentfault.com/a/1190000002953535">https://segmentfault.com/a/1190000002953535</a><br>未尝试！</p><h3 id="添加Valine评论"><a href="#添加Valine评论" class="headerlink" title="添加Valine评论"></a>添加Valine评论</h3><p>官网：<a href="https://butterfly.js.org/posts/ceeb73f/#%E8%A9%95%E8%AB%96">https://butterfly.js.org/posts/ceeb73f/#評論</a><br>官方文档：<a href="https://valine.js.org/quickstart.html">https://valine.js.org/quickstart.html</a><br>补充： <a href="https://blog.csdn.net/blue_zy/article/details/79071414">https://blog.csdn.net/blue_zy/article/details/79071414</a></p><h3 id="添加Artitalk说说"><a href="#添加Artitalk说说" class="headerlink" title="添加Artitalk说说"></a>添加Artitalk说说</h3><p>Butterfly文档：<a href="https://butterfly.js.org/posts/4073eda/#%E8%AA%AC%E8%AA%AC">https://butterfly.js.org/posts/4073eda/#説説</a><br>参考文档：<a href="https://blog.csdn.net/weixin_58068682/article/details/116612753">https://blog.csdn.net/weixin_58068682/article/details/116612753</a></p><h3 id="添加音乐"><a href="#添加音乐" class="headerlink" title="添加音乐"></a>添加音乐</h3><p>官方文档：<a href="https://butterfly.js.org/posts/4073eda/#%E9%9F%B3%E6%A8%82">https://butterfly.js.org/posts/4073eda/#音樂</a><br>添加全局吸底：<br>官方文档：<a href="https://butterfly.js.org/posts/507c070f/#%E5%89%8D%E8%A8%80">https://butterfly.js.org/posts/507c070f/#前言</a></p><h3 id="指定页面配置"><a href="#指定页面配置" class="headerlink" title="指定页面配置"></a>指定页面配置</h3><p>官网：<a href="https://butterfly.js.org/posts/dc584b87/#Front-matter">https://butterfly.js.org/posts/dc584b87/#Front-matter</a></p><h3 id="hexo官方文档"><a href="#hexo官方文档" class="headerlink" title="hexo官方文档"></a>hexo官方文档</h3><p>Front-matter:<a href="https://hexo.io/zh-cn/docs/front-matter">https://hexo.io/zh-cn/docs/front-matter</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Git学习笔记</title>
      <link href="/2021/09/04/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/09/04/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="一、创建和初始化本地库"><a href="#一、创建和初始化本地库" class="headerlink" title="一、创建和初始化本地库"></a>一、创建和初始化本地库</h2><h3 id="1-创建文件夹（例：E-testGit）"><a href="#1-创建文件夹（例：E-testGit）" class="headerlink" title="1.创建文件夹（例：E:\testGit）"></a>1.创建文件夹（例：E:\testGit）</h3><h3 id="2-打开Git-Bash（Git终端）"><a href="#2-打开Git-Bash（Git终端）" class="headerlink" title="2.打开Git Bash（Git终端）"></a>2.打开Git Bash（Git终端）</h3><p><font color=#00ffff>小贴士：</font>按住ctrl键使用+或-去放大终端上的字体大小（固定设置字体大小：鼠标右键–》Options–》Text–》Select–》选择字号–》Apply–》Save）<br><font color=#00ffff>小贴士：</font>设置编码集  鼠标右键–》Options–》Text–》Characher set选择UTF-8–》Apply–》Save<br>验证Git是否安装完成（顺便查看下版本信息）：git –version<br>基本命令（与Linux上操作一样）：<br>clear   清屏</p><h3 id="3-设置签名"><a href="#3-设置签名" class="headerlink" title="3.设置签名"></a>3.设置签名</h3><p>设置用户名和邮箱</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot; 你的用户名&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.email &quot;你的邮箱&quot;</span><br></pre></td></tr></table></figure><h3 id="4-本地仓库的初始化操作"><a href="#4-本地仓库的初始化操作" class="headerlink" title="4.本地仓库的初始化操作"></a>4.本地仓库的初始化操作</h3><p>使用命令进入到你创建的文件夹内（例：E:\testGit）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cd e:</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cd testGit</span><br></pre></td></tr></table></figure><p>或者在资源管理器中创建的文件夹内鼠标右键，打开Git Bash<br>初始化命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure><h3 id="5-查看目录命令"><a href="#5-查看目录命令" class="headerlink" title="5.查看目录命令"></a>5.查看目录命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ll -la  //查看包括隐藏的文件，.git文件是隐藏文件（windows查看隐藏文件）</span><br></pre></td></tr></table></figure><p><font color=#00ffff>小贴士：</font> config 配置文件</p><h2 id="二、提交文件"><a href="#二、提交文件" class="headerlink" title="二、提交文件"></a>二、提交文件</h2><p>add和commit命令，提交文件到暂存区和本地库（这样才能对文件进行后续管理）</p><h3 id="1-在本地仓库文件夹中创建一个文件-（例：test-txt）"><a href="#1-在本地仓库文件夹中创建一个文件-（例：test-txt）" class="headerlink" title="1. 在本地仓库文件夹中创建一个文件  （例：test.txt）"></a>1. 在本地仓库文件夹中创建一个文件  （例：test.txt）</h3><h3 id="2-将文件提交到暂存区"><a href="#2-将文件提交到暂存区" class="headerlink" title="2. 将文件提交到暂存区"></a>2. 将文件提交到暂存区</h3><p>先打开Git Bash终端输入命令：<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add &quot;Demo1.txt&quot; </span><br></pre></td></tr></table></figure></p><h3 id="3-将暂存区文件提交到本地库"><a href="#3-将暂存区文件提交到本地库" class="headerlink" title="3. 将暂存区文件提交到本地库"></a>3. 将暂存区文件提交到本地库</h3><p>打开Git Bash终端输入命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m &quot;这是我提交的第一个文件&quot; &quot;Demo1.txt&quot; </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m &quot;第一次提交文件&quot; &quot;Demo1.txt&quot;</span><br></pre></td></tr></table></figure><p><font color=#00ffff> 小贴士：</font> 参数：m：message  “”中的是注释，方便以后管理<br><font color=#00ffff> 小贴士：</font> 提交文件时可不用双引号把文件名括起来</p><p><strong>自己练习一下！</strong></p><h2 id="三、查看缓冲区和本地库状态的命令："><a href="#三、查看缓冲区和本地库状态的命令：" class="headerlink" title="三、查看缓冲区和本地库状态的命令："></a>三、查看缓冲区和本地库状态的命令：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br></pre></td></tr></table></figure><p>说明：<br>nothing to commit 说明暂存区是空的（在本地库中放入一个文件）</p><p>Untracked files：   没有进行文件追踪，说明存在在本地库文件夹中有尚未被提交到暂存区的文件（使用add命令将其添加到暂存区）</p><p>Changes to be committed： 文件可以被提交（使用commit命令，将文件提交到本地库）</p><p>0 insertions(+) ,0 deletions(-) 0行增加 ，0行删除<br>修改文件内容后，再次查看状态</p><p>modified  文件已经修改了（可将已经修改的重新提交到暂存区和本地库）</p><p><font color=#00ffff> 小贴士：</font>在工作区（本地库文件夹）中还没有被提交到暂存区的状态：untrack<br>通过add命令提交到暂存区，就是将文件加入到index中，状态变为：staged<br>通过commit命令可以将staged状态的文件加入到本地库的HEAD中</p><h2 id="四、查看日志"><a href="#四、查看日志" class="headerlink" title="四、查看日志"></a>四、查看日志</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log</span><br></pre></td></tr></table></figure><blockquote><p><code>commit eb5579cf745b6c68e6480f2fc19481bf9452f219 (HEAD -&gt; master)</code></p></blockquote><p>commit 后的十六进制代码 可以看成键值对的索引，就是&lt;key,value&gt;中的key，key：索引，value：历史记录中的具体内容。通过索引可以找到历史记录中的具体内容。<br><font color=#00ffff> 小贴士：</font> 历史版本由近至远<br><font color=#00ffff> 小贴士：</font> 当历史记录太多时，出现 ”：“进行分页，在”：“后通过空格回车可切换到下一页<br><font color=#00ffff> 小贴士：</font><br>下一页：空格<br>上一页：b<br>到尾页显示END<br>退出：q</p><h3 id="日志展示方式"><a href="#日志展示方式" class="headerlink" title="日志展示方式"></a>日志展示方式</h3><ul><li>以一种美观的方式，将其在一行上展示出来<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log --pretty=oneline</span><br></pre></td></tr></table></figure></li><li>显示一部分索引，将其在一行上展示出来<br>  <code>$ git log --oneline</code></li><li>显示指针回溯到相应的历史版本需要的步数<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reflog</span><br></pre></td></tr></table></figure><h2 id="五、前进、后退历史版本的命令"><a href="#五、前进、后退历史版本的命令" class="headerlink" title="五、前进、后退历史版本的命令"></a>五、前进、后退历史版本的命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard  【你所要跳到历史版本的索引】// 就是前面说的很长的一窜十六进制的数</span><br></pre></td></tr></table></figure><font color=#00ffff> 小贴士：</font>是指针名<br><font color=#00ffff> 小贴士：</font>复制，在终端选中就是复制。粘贴，右键鼠标点击past。<br><font color=#00ffff> 小贴士：</font>使用hard参数回溯历史版本时，本地库和暂存区已经本地存储的文件同步更改。<br>本地库（HEAD）的指针移动时，重置暂存区（index）、重置工作区（一开始初始化创建的文件夹）<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --mixed 【索引】</span><br></pre></td></tr></table></figure>本地库（HEAD）指针移动的同时，重置暂存区（index），但是工作区（初始化时的文件夹）不动<br><font color=#00ffff> 小贴士：</font>mixed参数不常用<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --soft 【索引】</span><br></pre></td></tr></table></figure>本地库（HEAD)指针移动的时候，暂存区（index）和工作区（初始化的文件夹）都不动<br><font color=#00ffff> 小贴士：</font>参数不常用<h2 id="六、删除操作"><a href="#六、删除操作" class="headerlink" title="六、删除操作"></a>六、删除操作</h2>删除工作区中的文件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rm 【文件名】</span><br></pre></td></tr></table></figure>将删除操作同步到暂存区<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add 【文件名】</span><br></pre></td></tr></table></figure>将删除操作同步到本地库<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit 【文件名】</span><br></pre></td></tr></table></figure><font color=#00ffff> 小贴士：</font> 该删除不是物理删除，只是改变了指针指向<br>找回本地库中删除的文件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard 【索引】</span><br></pre></td></tr></table></figure>实际上就是将历史版本切换到添加文件时的版本<br>找回暂存区的文件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard 【索引】</span><br></pre></td></tr></table></figure><h2 id="七、文件对比差异"><a href="#七、文件对比差异" class="headerlink" title="七、文件对比差异"></a>七、文件对比差异</h2></li></ul><h3 id="1-在工作区创建一个文件（例：TEST-txt），将其提交的暂存区和本地库中"><a href="#1-在工作区创建一个文件（例：TEST-txt），将其提交的暂存区和本地库中" class="headerlink" title="1.在工作区创建一个文件（例：TEST.txt），将其提交的暂存区和本地库中"></a>1.在工作区创建一个文件（例：TEST.txt），将其提交的暂存区和本地库中</h3><h3 id="2-更改工作区内的文件-TEST-txt-增加文件内容，导致工作区和暂存区文件不同步"><a href="#2-更改工作区内的文件-TEST-txt-增加文件内容，导致工作区和暂存区文件不同步" class="headerlink" title="2.更改工作区内的文件(TEST.txt),增加文件内容，导致工作区和暂存区文件不同步"></a>2.更改工作区内的文件(TEST.txt),增加文件内容，导致工作区和暂存区文件不同步</h3><p><font color=#00ffff> 小贴士：</font>Git是以行为单位进行管理<br>将工作区和暂存区文件进行比较的命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git  diff 【文件名】</span><br></pre></td></tr></table></figure><p>多个文件的比对命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git diff // 比较工作区和暂存区中所有文件的差异</span><br></pre></td></tr></table></figure><p>比较暂存区和本地库的差异</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git diff HEAD 【文件名】 // 比较暂存区和当前本地库中该文件的差异</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git diff HEAD 【索引号】【文件名 】// 比较暂存区和历史本地库中该文件的差异</span><br></pre></td></tr></table></figure><h2 id="八、查看、创建、切换分支"><a href="#八、查看、创建、切换分支" class="headerlink" title="八、查看、创建、切换分支"></a>八、查看、创建、切换分支</h2><p>概念<br>branch master主分支<br>branch分支<br>新的独立的功能，开辟新的分支branch，从master主分支上复制当前最新的版本到分支上。<br><font color=#00ffff> 小贴士：</font>多个分支可以并行开发，各个分支互不影响<br>分支的合并<br>hot_fix 热修复（分支合并出现bug后新开辟的分支）</p><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><ul><li>查看当前版本下的所有分支<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -v </span><br></pre></td></tr></table></figure></li><li>创建分支<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch 【分支名】</span><br></pre></td></tr></table></figure><font color=#00ffff> 小贴士：</font>：分支名前面的*表示当前所在的分支</li><li>切换分支<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout 【分支名】</span><br></pre></td></tr></table></figure><font color=#00ffff> 小贴士：</font>创建的新分支和当前主分支上最新版本索引号相同</li></ul><p>查看文件内容命令：</p><p><code>$ cat 【文件名】</code></p><h2 id="九、合并分支"><a href="#九、合并分支" class="headerlink" title="九、合并分支"></a>九、合并分支</h2><p> 将其他分支合并到主分支</p><ul><li>切换到主分支<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br></pre></td></tr></table></figure></li><li>将分支合并到主分支<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git merge 【分支名】</span><br></pre></td></tr></table></figure><font color=#00ffff> 小贴士：</font>master|MERGING代表储在合并状态中</li></ul><p>Merge conflict in 文件名  代表出现冲突<br>出现冲突的原因：在同一个文件的同一个位置修改<br>保留下需要的，进行修改后<br>将工作区中的内容添加到暂存区<br>进行commit操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m &quot;解决了冲突问题&quot; Demo1.txt</span><br></pre></td></tr></table></figure><p><font color=#00ffff> 小贴士：</font>不能带文件名，否则出错</p><h2 id="十、为仓库地址起别名（testRepository）"><a href="#十、为仓库地址起别名（testRepository）" class="headerlink" title="十、为仓库地址起别名（testRepository）"></a>十、为仓库地址起别名（testRepository）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote -v 查看远程库的别名</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add 别名 Github仓库的地址</span><br></pre></td></tr></table></figure><p><font color=#00ffff> 小贴士：</font>fetch可以从仓库取回东西，push可以推送东西</p><h2 id="十一、推送命令："><a href="#十一、推送命令：" class="headerlink" title="十一、推送命令："></a>十一、推送命令：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push 【别名】 master【要推送的分支名】</span><br></pre></td></tr></table></figure><h2 id="十二、克隆"><a href="#十二、克隆" class="headerlink" title="十二、克隆"></a>十二、克隆</h2><p>选取下载到的盘符（下载到地址）<br>拉取命令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone 远程库的地址</span><br></pre></td></tr></table></figure><p>克隆操作可以帮我们完成</p><ul><li>初始化本地库</li><li>将远程库内容完整克隆到本地库别名<h2 id="十三、邀请加入团队"><a href="#十三、邀请加入团队" class="headerlink" title="十三、邀请加入团队"></a>十三、邀请加入团队</h2></li></ul><p>使用push命令没有让输入密码也没有报错，push成功的原因是Git bash里有缓存<br>删除缓存：搜索管理你的凭据<br>邀请加入团队<br>进入远程库后点击Settings在Manage access里邀请普通成员<br>输入邀请人的github账户名<br>Pending Invite就是邀请连接<br>接受邀请输入，邀请连接</p><h2 id="十四、远程库的修改和拉取操作"><a href="#十四、远程库的修改和拉取操作" class="headerlink" title="十四、远程库的修改和拉取操作"></a>十四、远程库的修改和拉取操作</h2><h3 id="1-拉取pull操作的命令：相当于fetch-merge"><a href="#1-拉取pull操作的命令：相当于fetch-merge" class="headerlink" title="1.拉取pull操作的命令：相当于fetch+merge"></a>1.拉取pull操作的命令：相当于fetch+merge</h3><h3 id="2-项目经理先确定远程库内容是否更新了"><a href="#2-项目经理先确定远程库内容是否更新了" class="headerlink" title="2.项目经理先确定远程库内容是否更新了"></a>2.项目经理先确定远程库内容是否更新了</h3><h3 id="3-项目经理进行拉取操作："><a href="#3-项目经理进行拉取操作：" class="headerlink" title="3.项目经理进行拉取操作："></a>3.项目经理进行拉取操作：</h3><p>抓取操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch 【远程库别名或远程库地址】【分支名】</span><br></pre></td></tr></table></figure><p>抓取后切换到远程库中的内容是否正确</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout 【远程仓库别名】/【分支名】</span><br></pre></td></tr></table></figure><p>ll   查看目录<br>cat 【文件名】查看文件内容</p><p>发现内容都正确，进行合并操作<br>切换回本地库的主分支</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br></pre></td></tr></table></figure><p>合并分支</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git merge 【远程库别名】/【分支名】</span><br></pre></td></tr></table></figure><p><font color=#00ffff> 小贴士：</font>fetch操作只是将远程仓库里的东西下载到本地，并没有更新到工作区，工作区文件不变</p><p>直接pull拉取<br>远程库已经更新后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git pull 【远程仓库别名】【分支名】</span><br></pre></td></tr></table></figure><p><font color=#00ffff> 小贴士：</font>fetch+merge 为了保险，pull代码简单</p><h2 id="十五、跨团队合作"><a href="#十五、跨团队合作" class="headerlink" title="十五、跨团队合作"></a>十五、跨团队合作</h2><h3 id="1-得到远程库的地址"><a href="#1-得到远程库的地址" class="headerlink" title="1.得到远程库的地址"></a>1.得到远程库的地址</h3><h3 id="2-fork操作"><a href="#2-fork操作" class="headerlink" title="2.fork操作"></a>2.fork操作</h3><p>复制地址，点击fork操作</p><h3 id="3-克隆到本地，进行修改"><a href="#3-克隆到本地，进行修改" class="headerlink" title="3.克隆到本地，进行修改"></a>3.克隆到本地，进行修改</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone 【地址】</span><br></pre></td></tr></table></figure><h3 id="4-添加到暂存区，提交到本地库，推送到远程库"><a href="#4-添加到暂存区，提交到本地库，推送到远程库" class="headerlink" title="4.添加到暂存区，提交到本地库，推送到远程库"></a>4.添加到暂存区，提交到本地库，推送到远程库</h3><h3 id="5-进行pull-request操作"><a href="#5-进行pull-request操作" class="headerlink" title="5.进行pull request操作"></a>5.进行pull request操作</h3><p>点击Pull requests</p><h3 id="6-审核"><a href="#6-审核" class="headerlink" title="6.审核"></a>6.审核</h3><p>查看请求点击pull requests<br>Files changed 可以查看具体提交的内容<br>点击Merge pull request 进行合并</p><h2 id="十六、跨团队合作"><a href="#十六、跨团队合作" class="headerlink" title="十六、跨团队合作"></a>十六、跨团队合作</h2><h3 id="1-得到远程库的地址-1"><a href="#1-得到远程库的地址-1" class="headerlink" title="1.得到远程库的地址"></a>1.得到远程库的地址</h3><h3 id="2-fork操作-1"><a href="#2-fork操作-1" class="headerlink" title="2.fork操作"></a>2.fork操作</h3><p>复制地址，点击fork操作</p><h3 id="3-克隆到本地，进行修改-1"><a href="#3-克隆到本地，进行修改-1" class="headerlink" title="3.克隆到本地，进行修改"></a>3.克隆到本地，进行修改</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone 【地址】</span><br></pre></td></tr></table></figure><h3 id="4-添加到暂存区，提交到本地库，推送到远程库-1"><a href="#4-添加到暂存区，提交到本地库，推送到远程库-1" class="headerlink" title="4.添加到暂存区，提交到本地库，推送到远程库"></a>4.添加到暂存区，提交到本地库，推送到远程库</h3><h3 id="5-进行pull-request操作-1"><a href="#5-进行pull-request操作-1" class="headerlink" title="5.进行pull request操作"></a>5.进行pull request操作</h3><p>点击Pull requests</p><h3 id="6-审核-1"><a href="#6-审核-1" class="headerlink" title="6.审核"></a>6.审核</h3><p>查看请求点击pull requests<br>Files changed 可以查看具体提交的内容<br>点击Merge pull request 进行合并</p><h2 id="十七、SSH免密登录"><a href="#十七、SSH免密登录" class="headerlink" title="十七、SSH免密登录"></a>十七、SSH免密登录</h2><p>（如果操作系统不是windows10）push每次需要输入账户和密码<br>免密操作</p><h3 id="1-进入到用户的主目录中的命令："><a href="#1-进入到用户的主目录中的命令：" class="headerlink" title="1.进入到用户的主目录中的命令："></a>1.进入到用户的主目录中的命令：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~</span><br></pre></td></tr></table></figure><h3 id="2-执行命令生成一个-ssh的目录"><a href="#2-执行命令生成一个-ssh的目录" class="headerlink" title="2.执行命令生成一个.ssh的目录"></a>2.执行命令生成一个.ssh的目录</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C 【github对应的账户】</span><br></pre></td></tr></table></figure><p>三次确认回车，使用默认设置<br><font color=#00ffff> 小贴士：</font> C要大写<br>在.ssh目录下有两个文件id_rsa和id_rsa.pub，打开id_rsa.pub文件，将里面的内容进行复制操作</p><h3 id="3-打开github-在头像位置找到Settings-–》SSH-and-GPG-keys-–》创建型的SSH-keys，将复制的内容粘贴到key中"><a href="#3-打开github-在头像位置找到Settings-–》SSH-and-GPG-keys-–》创建型的SSH-keys，将复制的内容粘贴到key中" class="headerlink" title="3.打开github 在头像位置找到Settings –》SSH and GPG keys –》创建型的SSH keys，将复制的内容粘贴到key中"></a>3.打开github 在头像位置找到Settings –》SSH and GPG keys –》创建型的SSH keys，将复制的内容粘贴到key中</h3><h3 id="4-生成密钥以后就可以正常进行push操作"><a href="#4-生成密钥以后就可以正常进行push操作" class="headerlink" title="4.生成密钥以后就可以正常进行push操作"></a>4.生成密钥以后就可以正常进行push操作</h3><h3 id="5-添加别名的命令"><a href="#5-添加别名的命令" class="headerlink" title="5.添加别名的命令"></a>5.添加别名的命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add 【别名】 【远程库SSH协议下的地址】</span><br></pre></td></tr></table></figure><h2 id="十八、IDEA集成Git"><a href="#十八、IDEA集成Git" class="headerlink" title="十八、IDEA集成Git"></a>十八、IDEA集成Git</h2><p>创建project后，打开File点击Settings选择Git，设置git的安装路径<br>Path to Git executable：D:\study_setup\Git\bin\git.exe<br>Apply –》OK</p><h3 id="1-本地库的初始化操作"><a href="#1-本地库的初始化操作" class="headerlink" title="1.本地库的初始化操作"></a>1.本地库的初始化操作</h3><p>VCS选择Import into Version Control选择Create Git Repository<br>本地库初始化完成，生成了.git文件</p><h3 id="2-在创建好的project中创建New-Modul创建Package创建Class然后进行Java代码的书写"><a href="#2-在创建好的project中创建New-Modul创建Package创建Class然后进行Java代码的书写" class="headerlink" title="2.在创建好的project中创建New Modul创建Package创建Class然后进行Java代码的书写"></a>2.在创建好的project中创建New Modul创建Package创建Class然后进行Java代码的书写</h3><h3 id="3-在git中add添加到暂存区点击commit提交到本地库（可添加注释）Version-control相当终端-Log日志"><a href="#3-在git中add添加到暂存区点击commit提交到本地库（可添加注释）Version-control相当终端-Log日志" class="headerlink" title="3.在git中add添加到暂存区点击commit提交到本地库（可添加注释）Version control相当终端 Log日志"></a>3.在git中add添加到暂存区点击commit提交到本地库（可添加注释）Version control相当终端 Log日志</h3><h2 id="十九、使用idea拉取推送资源"><a href="#十九、使用idea拉取推送资源" class="headerlink" title="十九、使用idea拉取推送资源"></a>十九、使用idea拉取推送资源</h2><p>拉取</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git pull 【别名】 【分支名】--allow-unrelated-histories</span><br></pre></td></tr></table></figure><p>允许无联系的版本合并<br><font color=#00ffff> 小贴士：</font>不同本地库需要再次设置别名<br>推送</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push -u 【别名】【分支名】-f</span><br></pre></td></tr></table></figure><p>远程库和本地库已经可以进行交互了<br>直接commit和push（不推荐）<br>为了防止冲突，一般都是先pull后push</p><h2 id="二十、使用idea克隆远程仓库到本地"><a href="#二十、使用idea克隆远程仓库到本地" class="headerlink" title="二十、使用idea克隆远程仓库到本地"></a>二十、使用idea克隆远程仓库到本地</h2><p>利用IDEA进行克隆项目<br>new–》 Progect from Version Control–》Git<br>URL:远程库地址<br>Directory：放置位置<br>Test测试与远程库是否能连接上<br>Open Project 选择New Window选择在新窗口打开<br><font color=#00ffff> 小贴士：</font>克隆到本地后，这个目录即变成了一个本地仓库又变成了工作区间</p><h2 id="二十一、使用idea解决冲突"><a href="#二十一、使用idea解决冲突" class="headerlink" title="二十一、使用idea解决冲突"></a>二十一、使用idea解决冲突</h2><h3 id="1-制造冲突"><a href="#1-制造冲突" class="headerlink" title="1.制造冲突"></a>1.制造冲突</h3><h3 id="2-A和B对同一个文件的同一个位置进行修改"><a href="#2-A和B对同一个文件的同一个位置进行修改" class="headerlink" title="2.A和B对同一个文件的同一个位置进行修改"></a>2.A和B对同一个文件的同一个位置进行修改</h3><h3 id="3-解决冲突"><a href="#3-解决冲突" class="headerlink" title="3.解决冲突"></a>3.解决冲突</h3><p>出现冲突后，提示进行merge操作，点击merge进行合并（可选择合并的内容）</p><h3 id="4-避免冲突"><a href="#4-避免冲突" class="headerlink" title="4.避免冲突"></a>4.避免冲突</h3><p>团队开发时避免在一个文件中改代码<br>在修改一个文件之前，在push之前先pull操作，在别人的基础上进行修改</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo各文件夹的作用</title>
      <link href="/2021/09/04/Hexo%E5%90%84%E6%96%87%E4%BB%B6%E5%A4%B9%E7%9A%84%E4%BD%9C%E7%94%A8/"/>
      <url>/2021/09/04/Hexo%E5%90%84%E6%96%87%E4%BB%B6%E5%A4%B9%E7%9A%84%E4%BD%9C%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>对于初次接触hexo我们有必要了解它的各各文件是有着什么作用，了解后才能进一步对博客进行优化。</p><blockquote><p>1._config.yml 文件：站点配置文件，很多功能、插件需要修改该配置文件应用生效。</p><p>2.node_modules 文件夹：包含依赖的模块。</p><p>3.package.json 文件：依赖的模块列表。说明见：package.json:Specifics of npm’s package.json handling</p><p>4.package-lock.json 文件：依赖的模块安装记录。说明见：npm-package-locks:An explanation of npm lockfiles</p><p>5.public 文件夹：包含生成的网页静态文件。</p><p>6.scaffolds 文件夹：包含创建的文章、分类、标签界面的模板。博客的定制修改会对模板进行修改。</p><p>7.source 文件夹：包含生成网页所需要的源文件，包括包含我们心血的 Markdown 文稿，这也是最重要的内容。</p><p>8.themes 文件夹：其中 landscape 是默认的主题，其他文件夹是克隆下来时的主题。<br>引用自：<br><a href="https://www.dazhuanlan.com/rzh110120/topics/983203">https://www.dazhuanlan.com/rzh110120/topics/983203</a> </p></blockquote><p>注：.gitignore文件是git上传忽略的文件清单。告诉Git哪些文件不用添加到版本管理中。</p><p>.gitignore：<a href="https://www.jianshu.com/p/699ed86028c2">https://www.jianshu.com/p/699ed86028c2</a> </p>]]></content>
      
      
      <categories>
          
          <category> web_site </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>清理C盘</title>
      <link href="/2021/09/04/%E6%B8%85%E7%90%86C%E7%9B%98/"/>
      <url>/2021/09/04/%E6%B8%85%E7%90%86C%E7%9B%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="了解一下C盘"><a href="#了解一下C盘" class="headerlink" title="了解一下C盘"></a>了解一下C盘</h2><h3 id="概述——C盘的重要性"><a href="#概述——C盘的重要性" class="headerlink" title="概述——C盘的重要性"></a>概述——C盘的重要性</h3><p>对于清理C盘前，我们首先要知道C盘非常重要，不能随便清理。</p><p>操作系统存储在C盘，系统程序和我们安装的各种软件的启动产生的临时文件也依靠C盘去存储。C盘是内存的扩展，当</p><p>内存资源用完后，如果C盘是满的系统程序和其他软件程序将无法正常运行。为了更直观的看到，放张图片。Win10使用快捷键：Win图标+X  ，找到任务管理器  </p><p><img src="https://i.loli.net/2021/09/04/gzLcwRqbFdGpSn5.png" alt="清理C盘001.png"></p><p><strong>注意</strong>：里面的内存不是C盘，C盘是外存储器，存储文件；内存是内存储器，用于暂时存储cpu处理的运算数据。</p><p>可以看到，我的CPU资源已经用了大半，原因不是我的C盘满了，而是我打开的浏览器网页多，内存载入的缓存多。 </p><h3 id="补充——C盘影响电脑运行速度的原因"><a href="#补充——C盘影响电脑运行速度的原因" class="headerlink" title="补充——C盘影响电脑运行速度的原因"></a>补充——C盘影响电脑运行速度的原因</h3><p>C盘太满会影响电脑运行速度<br><strong>注明</strong>：以下引用知乎问答：<a href="_https://www.zhihu.com/question/29302513">网址</a></p><blockquote><ol><li>太满一般说明碎片过多。碎片多肯定影响速度。</li><li>系统默认虚拟内存在C盘，如果C盘过满，虚拟内存就会过于分散或者达不到分配值，操作系统难于维护虚拟内存，导致访问变慢。</li><li>太满的话，存储的东西都比较分散，硬盘是按块来的，如果块剩的少了，分配的块就比较散，寻道时间会比变长。</li><li>操作系统一般都是在C盘，运行时会产生很多临时文件，如果C盘过满，为了生成这些文件操作系统自己就会删掉一些确定不用的临时文件，这个过程也会浪费时间和资源。</li><li>基于4，不仅仅是操作系统，很多其他应用软件也会有类似的临时文件和临时空间的需求。</li><li>计算机很多功能都有缓存机制，包括网络访问，视频缓冲等等，这些功能一般也会在C盘开辟空间来进行，如果空间不够，就会少缓存甚至不缓存，当你用这些功能的时候自然就会觉得电脑变慢了。</li></ol></blockquote><p>平时安装软件注意路径选择其他盘符，如果什么都安装到C盘那么C盘满了之后系统运行可能会卡死。<br>看着自己的C盘已经用一大半了，得清清垃圾了。 </p><h2 id="清理C盘"><a href="#清理C盘" class="headerlink" title="清理C盘"></a>清理C盘</h2><h3 id="step-1-使用Windows自带清理工具"><a href="#step-1-使用Windows自带清理工具" class="headerlink" title="step 1 使用Windows自带清理工具"></a>step 1 使用Windows自带清理工具</h3><p>当系统更新时旧文件会占用很大的C盘空间，占用2G、3G的空间很正常。 Win10自带的清理工具，特别好的地方是可以放心清理系统垃圾<br>不会误删一些有用的文件，导致相关功能或应用失常。<br> 步骤：<br> win图标+E 打开win10的文件资源管理器，进入C盘，-》驱动器工具-》清理系统文件</p><h3 id="step-2-忍痛割爱–卸载软件"><a href="#step-2-忍痛割爱–卸载软件" class="headerlink" title="step 2 忍痛割爱–卸载软件"></a>step 2 忍痛割爱–卸载软件</h3><p>将不常用的软件或者重复的软件卸载掉。即便那些软件并没有直接安装在C盘中。但有些软件不管安装 哪个个盘里，运行时都会在C盘里生成文件、碎片。<br>当然，这是一种无差别对待，因为有些软件很无辜，它只会在C盘生成必要的注册表文件，其他的临时文件会放在你指定的安装路径下面。 </p><h3 id="step-3-针对C盘大文件清理"><a href="#step-3-针对C盘大文件清理" class="headerlink" title="step 3 针对C盘大文件清理"></a>step 3 针对C盘大文件清理</h3><p>当完成前两步，发现效果不大，我们就要有针对性的清理了。  </p><blockquote><p>C:\Users\用户名\AppData里面一般有三个文件夹，分别是Local，LocalLow，Roaming，简单地来说，它们是用来存放软件的配置文件和临时文件的，随着系统使用时间的增加和安装软件的增多，AppData占用的空间会越来越大。<br>引用<br>  知乎：<a href="https://zhuanlan.zhihu.com/p/62030272">https://zhuanlan.zhihu.com/p/62030272</a></p></blockquote><h3 id="step-4-清理卸载残留"><a href="#step-4-清理卸载残留" class="headerlink" title="step 4 清理卸载残留"></a>step 4 清理卸载残留</h3><ul><li>清理AppData </li></ul><p>C:\Users\用户名\AppData里有许多软件卸载残留，看到文件夹名是自己已经卸载过的软件，就可以把它删掉了。</p><ul><li>清理注册表<br>win图标+R  打开运行栏，输入：regidit 打开注册表，在HKEY_CURRENT_USER目录下找到SOFTWARE目录，删除与你已经卸载掉软件同名的文件夹。<br>注意的是，删除注册表往往收效甚微，对增加C盘可用空间帮助不大，但图个清静。  </li></ul><h3 id="step-5-做好预防"><a href="#step-5-做好预防" class="headerlink" title="step 5 做好预防"></a>step 5 做好预防</h3><p>C盘不建议安装软件和保存文件有两点原因。其一是其他数据存放C盘会占用C盘有限空间。C盘中的系统文件会随着使用的时间增长而不断增长，导致C盘容量逐渐减少，如果再毫无顾忌地添加其他数据会导致C盘爆满系统不能正常运行。其二不利于我们放在C盘的其他数据的长久保存。C盘是系统盘，当我们需要重装系统时，C盘里面的所有文件都会被覆盖掉。一些重要的文件再想恢复就十分困难了。</p><ul><li>软件安装路径要选择其他盘符</li><li>浏览器和其他软件的下载路径也选择其他盘符</li><li>文件归类存放，知道每个文件夹里的内容是什么，方便清理</li><li>桌面不要放太多东西，桌面的存储路径默认是C盘<br>查看c盘里的文档，是否保存了大量数据。如果有，看看是哪些软件产生的。找到那个软件把存储文档的路径改了就好。<br>以TIM为例：<br>c盘用户下面的文档，包含一个叫Tencent Files的文件夹，它里面保存的是tim产生的各种数据，包括qq好友头像，聊天记录，账号和密码，文件等缓存数据。里面的东西是文档数据，与系统和软件程序无关，可以删掉，但一旦使用软件还是会生成相应的数据。而且这个文档的路径虽然可以更改到其他盘符，但如果软件的缓存目录没有改变，还会在c盘重新生成这个文件夹。为了c盘的瘦身，我们必须要把软件的缓存路径更改掉。<br>其他软件可能找不到软件缓存数据的路径<br>以绿色版小黄条为例：<br>绿色意味着解压即可使用，无需安装，但因为如此，它的一些配置是固定在程序中的，不提供更改。这样的绿色软件不强求，因为本身它就比较小，产生的文档数据在c盘也占不了多少空间。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows小能手 </tag>
            
            <tag> Windows10 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gitee+HEXO搭建个人博客</title>
      <link href="/2021/09/02/Gitee+HEXO%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2021/09/02/Gitee+HEXO%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Gitee-HEXO搭建个人博客"><a href="#Gitee-HEXO搭建个人博客" class="headerlink" title="Gitee+HEXO搭建个人博客"></a>Gitee+HEXO搭建个人博客</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>1、gitee账号一个<br>到官网：<a href="https://gitee.com注册/">https://gitee.com注册</a><br>2、node.js<br>官网：<a href="https://nodejs.org/zh-cn/">https://nodejs.org/zh-cn/</a> 下载最新版<br>3、git<br>官网：<a href="https://git-scm.com/">https://git-scm.com/</a>  下载最新版<br>环境安装<br>安装git<br>一路next到安装完毕，保持默认选项<br>安装nodejs<br>一路next到安装完毕，保持默认选项</p><h2 id="初始化博客"><a href="#初始化博客" class="headerlink" title="初始化博客"></a>初始化博客</h2><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><p>win+r，打开运行，输入cmd<br>命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org           #安装淘宝镜像</span><br><span class="line">cnpm install -g hexo              #安装hexo博客生成系统</span><br></pre></td></tr></table></figure><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>新建空文件夹，在该文件夹路径下打开cmd（在搜索框的左边，点击空白区域，输入cmd，回车）</p><p>命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init                 #初始化博客系统，耐心等待</span><br><span class="line">hexo generate        #生成博客网页</span><br><span class="line">hexo server           #开启博客本地测试服务器</span><br></pre></td></tr></table></figure><h3 id="测试是否成功"><a href="#测试是否成功" class="headerlink" title="测试是否成功"></a>测试是否成功</h3><p>若运行成功，在浏览器网址栏中搜索cmd生成的网址（<a href="http://localhost:4000)，打开会看到hexo默认网页。">http://localhost:4000)，打开会看到hexo默认网页。</a></p><h3 id="部署到Gitee"><a href="#部署到Gitee" class="headerlink" title="部署到Gitee"></a>部署到Gitee</h3><p>打开GitBash，在文件资源管理器中右击鼠标就能找到。</p><h4 id="gitee远程登录"><a href="#gitee远程登录" class="headerlink" title="gitee远程登录"></a>gitee远程登录</h4><p>命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email &quot;注册gitee用的邮箱“</span><br><span class="line">git config --global user.name &quot;注册gitee的用户名&quot;</span><br><span class="line">ssh-keygen -t rsa -C &quot;注册gitee用的邮箱&quot; #上传登录密钥</span><br></pre></td></tr></table></figure><p><strong>注：之后有很多地方等待输入，直接回车。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat  `find /c/Users/ -name*.pub`</span><br></pre></td></tr></table></figure><p><strong>注：find前面`的符号，是Tab键上方的键。</strong><br>将公钥（ssh-rsa）都复制下来</p><h4 id="Gitee打开个人用户设置，找到SSH公钥，添加新的SSH-Keys，起名，粘贴公钥，添加。"><a href="#Gitee打开个人用户设置，找到SSH公钥，添加新的SSH-Keys，起名，粘贴公钥，添加。" class="headerlink" title="Gitee打开个人用户设置，找到SSH公钥，添加新的SSH Keys，起名，粘贴公钥，添加。"></a>Gitee打开个人用户设置，找到SSH公钥，添加新的SSH Keys，起名，粘贴公钥，添加。</h4><h4 id="测试是否成功-1"><a href="#测试是否成功-1" class="headerlink" title="测试是否成功"></a>测试是否成功</h4><p>命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@gitee.com </span><br></pre></td></tr></table></figure><p>中途会停下来，输入yes</p><p>若看到github用户名出现，就成功了。</p><h4 id="创建仓库（Create-repository）"><a href="#创建仓库（Create-repository）" class="headerlink" title="创建仓库（Create repository）"></a>创建仓库（Create repository）</h4><p>创建一个仓库，仓库名随意。<br>然后复制仓库地址，修改博客配置文件。</p><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>打开之前创建的文件夹在hexo里找到配置文件，_config.yml，使用编辑器打开（推荐使用notepad++）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">title： #网站标题</span><br><span class="line">subtitle：#网站副标题</span><br><span class="line">author： #作者</span><br><span class="line">language：zh-CN #语言</span><br><span class="line">timezone：‘Asia/Shanghai&#x27; #时区</span><br><span class="line">url：https://yl1010code.gitee.io #仓库名，前面是https</span><br><span class="line">deploy：</span><br><span class="line">   type： git</span><br><span class="line">   repo： git@gitee.com：yl1010code/yl1010code.gitee.io.git #粘贴你复制的仓库地址</span><br><span class="line">   branch： master</span><br><span class="line">theme: #hexo的主题</span><br></pre></td></tr></table></figure><p><strong>注：所有冒号后面都要有空格。</strong></p><h2 id="必须的命令"><a href="#必须的命令" class="headerlink" title="必须的命令"></a>必须的命令</h2><p>进入初始化的文件夹内，在hexo文件夹内右击鼠标，打开GitBash，输入的命令才有效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean #清除缓存</span><br><span class="line">hexo generate #生成博客网页</span><br><span class="line">hexo deploy #部署网页到gitee上面</span><br></pre></td></tr></table></figure><p>在hexo官网进行下载想要的主题：<a href="https://hexo.io/zh-cn">https://hexo.io/zh-cn</a></p><p>hexo官方文档：<a href="https://hexo.io/zh-cn/docs/writing">https://hexo.io/zh-cn/docs/writing</a></p><h2 id="开启Gitee-Pages服务"><a href="#开启Gitee-Pages服务" class="headerlink" title="开启Gitee Pages服务"></a>开启Gitee Pages服务</h2><p>在项目中的服务选择Pages选项，默认设置，点击启动即可。</p><p><strong>注：过程需要实名认证。</strong><br>完成后</p><p>浏览器输入：page网址就可以访问了。</p><p>例如：<a href="https://yl1010code.gitee.io/">https://yl1010code.gitee.io</a></p><p><strong>注：gitee的page服务不能自动更新部署，将hexo网页部署到gitee后还需要手动更新部署，这一点较部署到GitHub上就麻烦许多。</strong><br><strong>注：GitHub和gitee的公钥可以共用。</strong></p>]]></content>
      
      
      <categories>
          
          <category> web_site </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github +HEXO搭建个人博客详细教程</title>
      <link href="/2021/09/02/Github+HEXO%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2021/09/02/Github+HEXO%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Github-HEXO搭建个人博客详细教程"><a href="#Github-HEXO搭建个人博客详细教程" class="headerlink" title="Github +HEXO搭建个人博客详细教程"></a>Github +HEXO搭建个人博客详细教程</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>搭建博客查看了很多教程，从这些教程中获益良多，但还是浪费了很多时间，整理下就凑够了我的第一篇博客，希望可以帮助那些急需搭建个人博客的人。自己目前能做到的就是收集和整理前辈们的经验，把它写下来的主要目的是为了给自己做个总结，并且留个底，方便以后查看。做得简陋，请多多包涵。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>1、github账号一个<br>到官网：https：//github.com注册<br>2、node.js<br>官网：<a href="https://nodejs.org/zh-cn/">https://nodejs.org/zh-cn/</a> 下载最新版<br>3、git<br>官网：<a href="https://git-scm.com/">https://git-scm.com/</a>  下载最新版</p><h2 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h2><p>安装git<br>一路next到安装完毕，保持默认选项<br>安装nodejs<br>一路next到安装完毕，保持默认选项</p><h2 id="初始化博客"><a href="#初始化博客" class="headerlink" title="初始化博客"></a>初始化博客</h2><h3 id="1、安装hexo"><a href="#1、安装hexo" class="headerlink" title="1、安装hexo"></a>1、安装hexo</h3><p>win+r，打开运行，输入cmd</p><p>命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org           #安装淘宝镜像</span><br><span class="line">cnpm install -g hexo              #安装hexo博客生成系统</span><br></pre></td></tr></table></figure><h3 id="2、初始化"><a href="#2、初始化" class="headerlink" title="2、初始化"></a>2、初始化</h3><p>新建空文件夹，在该文件夹路径下打开cmd（在搜索框的左边，点击空白区域，输入cmd，回车）<br>命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init                 #初始化博客系统，耐心等待</span><br><span class="line">hexo generate        #生成博客网页</span><br><span class="line">hexo server           #开启博客本地测试服务器</span><br></pre></td></tr></table></figure><h3 id="3、测试是否成功"><a href="#3、测试是否成功" class="headerlink" title="3、测试是否成功"></a>3、测试是否成功</h3><p>若运行成功，在浏览器网址栏中搜索cmd生成的网址（<a href="http://localhost:4000)，打开会看到hexo默认网页。">http://localhost:4000)，打开会看到hexo默认网页。</a></p><h3 id="4、部署到GitHub"><a href="#4、部署到GitHub" class="headerlink" title="4、部署到GitHub"></a>4、部署到GitHub</h3><p>打开GitBash，在文件资源管理器中右击鼠标就能找到。</p><h4 id="（1）github远程登录"><a href="#（1）github远程登录" class="headerlink" title="（1）github远程登录"></a>（1）github远程登录</h4><p>命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email &quot;注册github用的邮箱“</span><br><span class="line">git config --global user.name &quot;注册github的用户名&quot;</span><br><span class="line">ssh-keygen -t rsa -C &quot;注册github用的邮箱&quot; #上传登录密钥</span><br><span class="line">#注：之后有很多地方等待输入，直接回车。</span><br><span class="line">cat  `find /c/Users/ -name*.pub`</span><br></pre></td></tr></table></figure><p><strong>注：find前面`的符号，是Tab键上方的键。</strong><br>将公钥（ssh-rsa）都复制下来</p><h4 id="Github打开个人用户设置，找到SSH-and-GPG，创建新的SSH-Keys，起名，粘贴公钥，添加。"><a href="#Github打开个人用户设置，找到SSH-and-GPG，创建新的SSH-Keys，起名，粘贴公钥，添加。" class="headerlink" title="Github打开个人用户设置，找到SSH and GPG，创建新的SSH Keys，起名，粘贴公钥，添加。"></a>Github打开个人用户设置，找到SSH and GPG，创建新的SSH Keys，起名，粘贴公钥，添加。</h4><h4 id="测试是否成功"><a href="#测试是否成功" class="headerlink" title="测试是否成功"></a>测试是否成功</h4><p>命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com </span><br></pre></td></tr></table></figure><p>中途会停下来，输入yes</p><p>若看到github用户名出现，就成功了。</p><h4 id="创建仓库（Create-repository）"><a href="#创建仓库（Create-repository）" class="headerlink" title="创建仓库（Create repository）"></a>创建仓库（Create repository）</h4><p>创建一个仓库名为你的用户名后面加.github.io的仓库，不然无法访问。</p><p>然后复制仓库地址，修改博客配置文件。</p><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>打开之前创建的文件夹在hexo里找到配置文件，_config.yml，使用编辑器打开（推荐使用notepad++）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">title： #网站标题</span><br><span class="line">subtitle：#网站副标题</span><br><span class="line">author： #作者</span><br><span class="line">language：zh-CN #语言</span><br><span class="line">timezone：‘Asia/Shanghai&#x27; #时区</span><br><span class="line">url：https://yl1010code.github.io #仓库名，前面是https</span><br><span class="line">deploy：</span><br><span class="line">   type： git</span><br><span class="line">   repo： git@github.com：yl1010code/yl1010code.github.io.git #粘贴你复制的仓库地址</span><br><span class="line">   branch： master</span><br><span class="line">theme：#hexo的主题</span><br></pre></td></tr></table></figure><p><strong>注：所有冒号后面都要有空格。</strong></p><h2 id="必须的命令"><a href="#必须的命令" class="headerlink" title="必须的命令"></a>必须的命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">进入初始化的文件夹内，在hexo文件夹内右击鼠标，打开GitBash，输入的命令才有效</span><br><span class="line">hexo clean #清除缓存</span><br><span class="line">hexo generate #生成博客网页</span><br><span class="line">hexo deploy #部署网页到github上面</span><br></pre></td></tr></table></figure><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;title&quot; #新建文章(md文件)，title为文章的标题</span><br><span class="line">hexo new page &quot;pagename&quot; #新建网页，pagename为网页的名称</span><br><span class="line">hexo clean #清除部署的緩存</span><br><span class="line">hexo n == hexo new #新建一篇文章</span><br><span class="line">hexo g == hexo generate #生成静态页面</span><br><span class="line">hexo s == hexo server #本地部署，可预览网站，默认端口为4000，浏览器输入localhost:4000即可进入网站进行预览，回到git-bash按ctrl+c退出预览(退出后localhost:4000失效)</span><br><span class="line">hexo d == hexo deploy #将网站部署到GitHub</span><br><span class="line">hexo g -d #生成页面并部署到GitHub</span><br><span class="line">hexo g -s #生成页面并本地部署进行预览</span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>在hexo官网进行下载想要的主题：<a href="https://hexo.io/zh-cn">https://hexo.io/zh-cn</a></p><p>hexo官方文档：<a href="https://hexo.io/zh-cn/docs/writing">https://hexo.io/zh-cn/docs/writing</a></p><p><strong>注：因为GitHub是外国网站，国内访问速度比较慢，可以把博客部署到gitee上面。</strong></p><p><strong>注：GitHub和gitee的公钥可以共用。</strong></p>]]></content>
      
      
      <categories>
          
          <category> web_site </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
